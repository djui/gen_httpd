-module(micro_benchmark).
-export([
        tcp_server_active/1,
        tcp_server_active/2,
        tcp_server_passive/1,
        tcp_server_passive/2,
        tcp_server_reader/1,
        tcp_server_reader/2,
        tcp_client/3
    ]).

-export([reader/2]).

-define(DATA,
    <<95,160,155,31,152,85,252,58,196,5,33,88,151,200,249,87,54,166,104,250,105,51,
      41,216,156,4,254,229,249,125,164,248,239,63,34,73,247,2,46,144,161,86,23,95,
      128,73,147,98,232,142,126,220,15,187,23,241,110,40,254,26,122,18,56,175,166,
      53,67,86,45,34,133,43,18,59,110,57,233,145,155,87,41,209,99,145,130,136,0,76,
      44,9,57,111,48,86,21,62,199,129,164,148,192,12,91,123,231,248,132,123,79,83,
      206,169,91,255,207,56,50,56,128,195,67,48,76,52,97,189,36,53,19,253,209,170,
      148,97,199,231,250,56,14,31,153,111,68,71,83,198,92,66,24,233,132,4,98,29,
      253,49,219,134,119,245,108,107,203,200,160,180,223,172,56,145,216,46,194,10,
      51,32,208,83,131,193,32,68,114,3,144,106,31,211,34,29,188,26,251,218,31,166,
      134,68,143,169,197,221,56,64,132,197,114,113,193,126,249,243,85,48,192,65,55,
      6,192,67,200,8,212,126,21,129,199,250,35,131,74,13,80,69,35,8,113,92,249,233,
      211,195,12,76,84,131,65,26,4,168,230,255,64,41,111,118,182,22,169,11,141,14,
      102,117,175,140,116,53,100,85,213,97,43,66,79,235,7,47,86,225,116,67,168,237,
      159,228,66,126,50,113,53,82,166,185,41,12,224,154,6,249,57,28,20,163,57,82,
      106,11,129,60,198,63,215,123,127,77,127,110,174,120,181,230,176,159,250,126,
      203,166,64,143,215,242,57,133,128,168,242,157,167,207,10,162,9,118,14,106,
      115,160,50,97,158,80,88,69,226,179,184,195,12,150,149,179,145,71,99,14,78,
      237,33,107,177,160,22,13,51,22,100,91,191,156,219,68,22,127,82,172,150,149,
      107,111,128,138,210,4,185,36,33,213,193,244,162,19,22,143,32,107,84,237,76,
      70,64,119,134,222,6,237,132,239,24,3,179,255,203,179,128,168,107,129,125,60,
      33,247,14,247,121,240,106,133,105,138,8,91,212,186,99,222,142,129,211,250,5,
      86,62,33,53,244,80,159,122,122,78,174,8,38,133,224,98,191,31,102,143,40,142,
      101,101,77,84,111,223,97,136,76,244,56,189,127,211,59,2,167,113,203,39,189,6,
      160,249,240,10,180,130,42,156,173,89,90,150,37,230,141,40,137,231,131,114,35,
      152,25,0,50,59,29,227,164,42,23,206,9,74,91,242,144,227,157,44,27,96,210,16,
      65,199,89,180,43,61,145,22,31,82,165,194,104,82,221,63,82,145,30,84,172,3,
      238,105,59,19,95,172,45,90,60,239,130,82,105,237,67,82,67,99,1,130,77,123,
      126,248,45,43,25,14,175,129,167,187,95,42,143,143,94,16,214,44,175,220,133,
      126,157,53,169,162,224,128,218,213,87,152,65,50,248,34,158,141,203,183,20,41,
      146,109,158,122,254,239,247,121,40,126,191,165,13,113,211,123,12,148,53,146,
      11,193,144,146,229,88,16,96,77,224,56,244,185,167,182,162,244,77,252,236,209,
      7,113,86,184,146,54,66,76,194,31,213,143,124,5,144,122,233,215,146,134,39,
      224,46,232,103,234,244,0,163,103,222,91,32,49,192,149,29,169,178,242,157,12,
      178,192,97,195,47,145,9,100,103,218,107,231,9,34,80,125,105,15,205,131,0,38,
      98,105,155,243,164,147,34,244,192,167,132,246,73,2,145,144,169,136,105,3,152,
      104,213,5,14,208,56,141,157,236,230,160,208,75,182,8,93,108,238,91,121,165,
      166,160,9,119,254,227,45,94,254,240,75,28,220,211,131,160,254,87,178,142,45,
      110,199,78,154,142,121,90,117,74,242,182,186,173,211,200,160,94,67,28,61,1,
      43,105,133,62,209,12,76,201,151,1,239,151,180,202,223,185,191,2,137,114,26,
      59,250,203,228,128,158,157,216,182,212,172,235,80,42,221,151,67,142,112,73,
      165,81,128,202,106,54,195,243,1,79,137,253,69,13,19,106,56,160,43,74,251,49,
      6,48,181,244,48,60,184,225,127,72,120,144,166,71,254,75,72,11,16,236,245,156,
      87,170,111,204,48,16,23,212,27,144,234,52,124,107,114,160,37,18,120,115,180,
      11,77,236,173,190,65,197,20,29,185,142,147,37,163,27,85,52,239,46,170,24,88,
      98,228,148,79,154,28,152,123,243,111,45,192,186,123,46,7,3,30,248,23,227,211,
      233,148,72,238,251,184,185,230,2,40,158,114,230,12,117,109,97,81,175,45,165,
      48,51,141,212,232,128,158,76,198,152,138,41,194,69,108,253,106,215,73,247,
      216,205,54,48,68,84,198,126,75,77,24,208,235,165,15,178,164,192,150>>).


tcp_server_active(Port) ->
    tcp_server_active({0,0,0,0}, Port).

tcp_server_active(Host, Port) ->
    tcp_server(Host, Port, active).

tcp_server_passive(Port) ->
    tcp_server_passive({0,0,0,0}, Port).

tcp_server_passive(Host, Port) ->
    tcp_server(Host, Port, passive).

tcp_server_reader(Port) ->
    tcp_server_reader({0,0,0,0}, Port).

tcp_server_reader(Host, Port) ->
    tcp_server(Host, Port, reader).

tcp_server(Host, Port, Mode) ->
    SockOpts = [
        case Mode of
            active -> {active, once};
            passive -> {active, false};
            reader -> {active, false}
        end, binary, {ip, Host}],
    {ok, Socket} = gen_tcp:listen(Port, SockOpts),
    {ok, CLSock} = gen_tcp:accept(Socket),
    gen_tcp:close(Socket),
    case Mode of
        active  ->
            recv_loopa(CLSock, now(), 0);
        passive ->
            recv_loopp(CLSock, now(), 0);
        reader ->
            Reader = spawn_link(?MODULE, reader, [self(), CLSock]),
            recv_loopr(Reader, now(), 0)
    end.

recv_loopa(Socket, Start, Bytes) ->
    receive
        {tcp, _, Data} ->
            inet:setopts(Socket, [{active, once}]),
            recv_loopa(Socket, Start, Bytes + size(Data));
        {tcp_closed, Socket} ->
            close(Socket, Start, Bytes)
    end.

recv_loopp(Socket, Start, Bytes) ->
    case gen_tcp:recv(Socket, 0) of
        {ok, Data} ->
            recv_loopp(Socket, Start, Bytes + size(Data));
        {error, closed} ->
            close(Socket, Start, Bytes)
    end.

recv_loopr(Reader, Start, Bytes) ->
    receive
        {data, Data} ->
            Reader ! ack,
            recv_loopr(Reader, Start, Bytes + size(Data));
        {closed, Socket} ->
            close(Socket, Start, Bytes)
    end.

reader(Controller, Socket) ->
    case gen_tcp:recv(Socket, 0) of
        {ok, Data} ->
            Controller ! {data, Data},
            receive ack -> reader(Controller, Socket) end;
        {error, closed} ->
            Controller ! {closed, Socket}
    end.

close(Socket, Start, Bytes) ->
    MicroSeconds = timer:now_diff(now(), Start),
    gen_tcp:close(Socket),
    MBytes = Bytes div (1024 * 1024),
    BPS = round((MBytes / MicroSeconds) * 1000000),
    io:format(
        "Received ~b Mb in ~b seconds (~b Mb/second).~n",
        [MBytes, MicroSeconds div 1000000, BPS]
    ).

tcp_client(Host, Port, MBytes) ->
    {ok, Socket} = gen_tcp:connect(Host, Port, []),
    send_loop(Socket, MBytes * 1024),
    gen_tcp:close(Socket).

send_loop(_, 0) ->
    ok;
send_loop(Socket, Iterations) ->
    case gen_tcp:send(Socket, ?DATA) of
        ok              -> send_loop(Socket, Iterations - 1);
        {error, closed} -> ok
    end.
